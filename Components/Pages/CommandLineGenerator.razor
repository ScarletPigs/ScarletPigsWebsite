@page "/command-line-generator"
@namespace ScarletPigsWebsite.Components.Pages
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using ScarletPigsWebsite.Data.Enums
@using ScarletPigsWebsite.Data.Models.Helpers
@using ScarletPigsWebsite.Data.Models.ModLists
@using ScarletPigsWebsite.Data.Services.HTTP
@using System.Text.RegularExpressions

@inject IJSRuntime JS
@inject ISnackbar Snackbar


<MudContainer Style="margin-top: 50px; max-width: 800px; margin-left: auto; margin-right: auto;">
    <MudGrid Style="width: 100%;">
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Align="Align.Center">Command Line Generator</MudText>
        </MudItem>

        <MudItem xs="12">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                           @ref="@_fileUpload"
                           OnFilesChanged="OnInputFileChanged"
                           AppendMultipleFiles="false"
                           Accept=".txt,.html"
                           Hidden="@false"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                           InputStyle="opacity:0"
                           tabindex="-1"
                           @ondrop="@ClearDragClass"
                           @ondragenter="@SetDragClass"
                           @ondragleave="@ClearDragClass"
                           @ondragend="@ClearDragClass">
                <ActivatorContent>
                    <MudPaper Outlined="true"
                              Class="@_dragClass"
                              Style="display: flex; justify-content: center; align-items: center; min-height: 150px; width: 100%; margin: 0 auto;">
                        <MudText Typo="Typo.h6" Align="Align.Center">
                            Drag and drop a modlist here or click to select
                        </MudText>
                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.h6" Align="Align.Center">or generate from mod Ids</MudText>
        </MudItem>

        <MudItem xs="12">
            <MudTextField @bind-Value="@customIdText"
                          Immediate="true"
                          Label="Add mod ids here"
                          Variant="Variant.Outlined"
                          AutoGrow=true
                          Lines="3"
                          MaxLines="6"
                          Style="width: 100%;" />
        </MudItem>
        @if (!string.IsNullOrEmpty(customIdText))
        {
            <MudItem xs="12" Style="margin-top: 5px; display: flex; justify-content: left;">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GenerateCommandlineFromText">
                    Generate commandline
                </MudButton>
            </MudItem>
        }

        @if (!string.IsNullOrEmpty(commandLine))
        {
            <MudItem xs="12" sm="6" md="4">
                <MudSelect T="Mod" Label="No DLCs" HelperText="Select DLCs here" @bind-SelectedValues="selectedDlcs" OnClose="OnDlcValueChanged"
                           ToStringFunc="@converter"
                           MultiSelection="true"
                           OpenIcon="@Icons.Material.Filled.Extension" AdornmentColor="Color.Primary">
                    @foreach (Mod mod in availableDlcs)
                    {
                        <MudSelectItem Value="@mod">@mod.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" Style="margin-top: 5px;">
                <MudTextField @bind-Value="@commandLine"
                              ReadOnly="true"
                              Label="Command Line"
                              Style="width: 100%;" />
            </MudItem>
            <MudItem xs="12" Style="margin-top: 10px; display: flex; justify-content: center;">
                <MudButton OnClick="@CopyToClipboard" Color="Color.Primary" Variant="Variant.Filled">
                    Copy
                </MudButton>
            </MudItem>
        }

    </MudGrid>
</MudContainer>


@code {
    #nullable enable
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private string commandLine = string.Empty;
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private ModList? currentModlist { get; set; }
    private List<Mod> availableDlcs = ModList.GetAvailableDlcs();
    public IEnumerable<Mod> selectedDlcs { get; set; } = new HashSet<Mod>();

    [Inject]
    public ISteamworksApi SteamworksApi { get; set; } = default!;
    private string customIdText;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        //_fileNames.Clear();
        ClearDragClass();
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            var files = e.GetMultipleFiles();
            if(!ValidateInput(files, out string error))
            {
                Snackbar.Add(error, Severity.Error);
                return;
            }

            // Load the mod list
            ModList modList = await ModList.CreateModListFromFileAsync(files[0]);

            UpdateCommandLine(modList);
        }
        catch (Exception ex)
        {
            commandLine = string.Empty;
            Snackbar.Add($"Failed to load the mod list: {ex.Message}", Severity.Error);
        }
        finally
        {
            // Clear the file upload
            await ClearAsync();
        }
    }

    private bool ValidateInput(IReadOnlyList<IBrowserFile> files, out string error)
    {
        error = string.Empty;
        if (files.Count == 0)
        {
            error = "No files selected.";
            return false;
        }

        if (files.Count > 1)
        {
            error = "Only one file can be selected.";
            return false;
        }

        // Check the file type
        var file = files[0];
        var extension = Path.GetExtension(file.Name).ToLower();

        if (extension != ".txt" && extension != ".html")
        {
            error = "Only .txt and .html files are allowed.";
            return false;
        }

        return true;
    }

    private List<string> GetModIdsFromString(string text)
    {
        //find all numbers in the input text.
        MatchCollection matches = Regex.Matches(text, @"\d+");

        List<string> modIds = new List<string>();
        foreach (Match match in matches)
        {
            // Add the matched number to the list if it is > 0 and <= 64-bit unsigned integer
            if(ulong.TryParse(match.Value, out ulong result))
            {
                //0 is not a valid mod id
                if(result > 0)
                    modIds.Add(match.Value);
            }
        }

        return modIds;
    }

    private async void GenerateCommandlineFromText()
    {
        try
        {
            List<string> modIds = GetModIdsFromString(customIdText);

            if (modIds.Count == 0)
            {
                Snackbar.Add("No mod ids found in the text.", Severity.Error);
                return;
            }

            var response = await SteamworksApi.GetWorkshopModDetailsAsync(modIds);
            if (response == null)
            {
                Snackbar.Add("Failed to get mod details from Steam.", Severity.Error);
                return;
            }

            // Create a mod list from the response
            ModList modList = ModList.CreateModListFromSteamIds(response);

            var foundDlcs = ModList.FindDlcFromIds(modIds);
            modList.UpdateDlcs(foundDlcs);

            if (modList == null)
            {
                Snackbar.Add("Failed to generate modlist.", Severity.Error);
                return;
            }
            if (modList.Mods.Count == 0)
            {
                Snackbar.Add("No mods found.", Severity.Error);
                return;
            }

            UpdateCommandLine(modList);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to generate command line: {ex.Message}", Severity.Error);
        }
    }

    private void UpdateCommandLine(ModList newModlist)
    {
        currentModlist = newModlist;
        commandLine = newModlist.GetCommandLine();
        selectedDlcs = newModlist.Dlcs;

        Snackbar.Add("Command line created!", Severity.Success);

        // Ensure the UI updates
        StateHasChanged();
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JS.InvokeVoidAsync("copyToClipboard", commandLine);
            Snackbar.Add("Copied!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to copy: {ex.Message}", Severity.Error);
        }
    }

    private void OnDlcValueChanged()
    {
        if (currentModlist == null)
            return;

        bool dlcChanged = currentModlist.UpdateDlcs(selectedDlcs.ToList());
        if(dlcChanged)
            commandLine = currentModlist.GetCommandLine();
    }

    Func<Mod, string> converter = m => m?.Name;

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}