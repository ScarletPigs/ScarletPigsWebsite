@page "/command-line-generator"
@namespace ScarletPigsWebsite.Components.Pages
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using ScarletPigsWebsite.Data.Models.ModLists

@inject IJSRuntime JS
@inject ISnackbar Snackbar


<MudContainer Style="margin-top: 50px; max-width: 800px; margin-left: auto; margin-right: auto;">
    <MudGrid Style="width: 100%;">
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Align="Align.Center">Command Line Generator</MudText>
        </MudItem>

        <MudItem xs="12">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                           @ref="@_fileUpload"
                           OnFilesChanged="OnInputFileChanged"
                           AppendMultipleFiles ="false"
                           Accept=".txt,.html"
                           Hidden="@false"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                           InputStyle="opacity:0"
                           tabindex="-1"
                           @ondrop="@ClearDragClass"
                           @ondragenter="@SetDragClass"
                           @ondragleave="@ClearDragClass"
                           @ondragend="@ClearDragClass">
                <ActivatorContent>
                    <MudPaper Outlined="true"
                              Class="@_dragClass"
                              Style="display: flex; justify-content: center; align-items: center; min-height: 150px; width: 100%; margin: 0 auto;">
                        <MudText Typo="Typo.h6" Align="Align.Center">
                            Drag and drop a modlist here or click to select
                        </MudText>
                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
        </MudItem>

        @if (!string.IsNullOrEmpty(commandLine))
        {
            <MudItem xs="12" Style="margin-top: 5px;">
                <MudTextField @bind-Value="@commandLine"
                              ReadOnly="true"
                              Label="Command Line"
                              Style="width: 100%;" />
            </MudItem>
            <MudButton OnClick="@CopyToClipboard" Color="Color.Primary" Variant="Variant.Filled">
                Copy
            </MudButton>
        }
    </MudGrid>
</MudContainer>


@code {
    #nullable enable
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private string commandLine = string.Empty;
    //private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        //_fileNames.Clear();
        ClearDragClass();
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            var files = e.GetMultipleFiles();
            if(!ValidateInput(files, out string error))
            {
                Snackbar.Add(error, Severity.Error);
                return;
            }

            // Load the mod list
            ModList modList = await ModList.CreateModListFromFileAsync(files[0]);

            commandLine = modList.GetCommandLine();

            Snackbar.Add("Command line created!", Severity.Success);

            // Ensure the UI updates
            StateHasChanged();
        }
        catch (Exception ex)
        {
            commandLine = string.Empty;
            Snackbar.Add($"Failed to load the mod list: {ex.Message}", Severity.Error);
        }
        finally
        {
            // Clear the file upload
            await ClearAsync();
        }
    }

    private bool ValidateInput(IReadOnlyList<IBrowserFile> files, out string error)
    {
        error = string.Empty;
        if (files.Count == 0)
        {
            error = "No files selected.";
            return false;
        }

        if (files.Count > 1)
        {
            error = "Only one file can be selected.";
            return false;
        }

        // Check the file type
        var file = files[0];
        var extension = Path.GetExtension(file.Name).ToLower();

        if (extension != ".txt" && extension != ".html")
        {
            error = "Only .txt and .html files are allowed.";
            return false;
        }

        return true;
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JS.InvokeVoidAsync("copyToClipboard", commandLine);
            Snackbar.Add("Copied!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to copy: {ex.Message}", Severity.Error);
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}