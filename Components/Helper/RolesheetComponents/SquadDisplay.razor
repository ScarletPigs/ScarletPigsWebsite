@using ScarletPigsWebsite.Data.Models.Helpers
@using ScarletPigsWebsite.Data.Models.RoleAssignments
@namespace ScarletPigsWebsite.Components.Helper.RolesheetComponents



@if (SVGContainer == null)
{
    <SVGPath @ref="_SVGContainer"  />
}

<div>
    <table>
        <tbody>
            <tr>
                <!-- Displays the squad name and roles -->
                <td>
                    <div style="display:flex;flex-direction:row;margin:1rem;">
                        <div style="height:inherit;align-content:center;">
                            <img @ref="@SquadDisplayRef" src="imgs/arma/orbaticons/Nato JMS_Infantry.svg" alt="Squad" style="height:3em;margin-right:1em;position:relative;z-index:10;" />
                        </div>
                        <p style="color:@TextColor;height:inherit;margin:0px;">
                            <span style="font-size:3em;text-shadow:3px 3px 5px black">@Squad.Callsign.ToUpper()  </span>
                            <span style="font-size:1.4em;text-shadow:3px 3px 5px black">@Squad.DescriptiveName</span>
                        </p>
                    </div>


                    @if (Squad.Roles != null && Squad.Roles.Count > 0)
                    {
                    <ul style="padding-left:4rem;">
                        @foreach (Role role in Squad.Roles)
                        {
                            <li>
                                <p>
                                    <img src="@role.Icon" alt="@role.Name" style="width:2em;height:2em;" />
                                    <span>@role.Name.PadRight(20, '.')</span>
                                    <span>@role.AssignedPlayer.PadRight(20, ' ')</span>
                                </p>
                            </li>
                        }
                    </ul>
                    }
                </td>

                <td style="width:100px;">
                </td>

                <!-- Displays all short range radio stuff -->
                <td style="padding-top:10px;">
                    <RadioTable SR="true" Squad="Squad" TextColor="@TextColor" />
                </td>

                <td style="width:50px;">
                </td>

                <!-- Displays all long range radio stuff -->
                <td style="padding-top:10px;">
                    <RadioTable LR="true" Squad="Squad" TextColor="@TextColor" />
                </td>

                <td style="width:100px;">
                </td>
            </tr>
        </tbody>
    </table>
</div>

@if (Squad.Squads != null && Squad.Squads.Count > 0)
{
    @foreach (Squad squad in Squad.Squads)
    {
        <div style="padding-left:50px;">
            <SquadDisplay SVGContainer="@_SVGContainer" Squad="squad" TextColor="@TextColor" OnElementReferenceChanged="AddElementReference" />
        </div>
    }
}

@code {
    [Parameter]
    public Squad? Squad { get; set; }

    [Parameter]
    public EventCallback<Squad?> SquadChanged { get; set; }

    [Parameter]
    public string TextColor { get; set; } = "#f8b133";

    [Parameter]
    public EventCallback<ElementReference> OnElementReferenceChanged { get; set; }

    [Parameter]
    public SVGPath? SVGContainer { get; set; } = null;

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private ElementReference SquadDisplayRef { get; set; }

    private List<ElementReference> SquadDisplayRefs { get; set; } = new List<ElementReference>();
    private List<(ElementReference StartRef, ElementReference EndRef)> Connections { get; set; } = new List<(ElementReference, ElementReference)>();

    private SVGPath? _SVGContainer { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {

        await OnElementReferenceChanged.InvokeAsync(SquadDisplayRef);
    }


    protected override async Task OnParametersSetAsync()
    {
        if (SVGContainer != null)
            _SVGContainer = SVGContainer;

        
    }

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (ElementReference elementReference in SquadDisplayRefs)
        {
            // Connections.Add((SquadDisplayRef, elementReference));
            if (_SVGContainer != null)
                _SVGContainer.Connections.Add((SquadDisplayRef, elementReference));
            else
                SVGContainer?.Connections.Add((SquadDisplayRef, elementReference));
        }
    }

    private async Task AddElementReference(ElementReference elementReference)
    {
        SquadDisplayRefs.Add(elementReference);
    }

    private async Task<object> GetElementDetails(string elementId)
    {
        var element = await JSRuntime.InvokeAsync<ElementDetails>("getElementDetails", elementId);
        
        return element;
    }
}
